<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Queue on Thezmmm</title>
    <link>https://thezmmm.github.io/tags/queue/</link>
    <description>Recent content in Queue on Thezmmm</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>© Thezmmm</copyright>
    <lastBuildDate>Mon, 12 Sep 2022 10:30:53 +0800</lastBuildDate><atom:link href="https://thezmmm.github.io/tags/queue/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Queue</title>
      <link>https://thezmmm.github.io/post/javaqueue/</link>
      <pubDate>Mon, 12 Sep 2022 10:30:53 +0800</pubDate>
      
      <guid>https://thezmmm.github.io/post/javaqueue/</guid>
      <description>Queue 队列是一种FIFO( First In First Out)型的线性结构
Queue的实现类有LinkedList和PriorityQueue。最常用的实现类是LinkedList
Queue queue = new LinkedList();  // add() 和 remove() 在失败时会抛出异常  // 添加元素 queue.offer(1); // 删除元素 queue.poll(); // 查看队首元素 queue.peek(); // 获取队列长度 queue.size() Deque 普通队列可以从队尾添加元素，从队首删除元素，而**双端队列( double ended queue )**可以在两头进行添加和删除
示例 Deque deque = new LinkedList();  // add() 和 remove() 在失败时会抛出异常  // 添加元素 deque.offerFirst(1); deque.offerLast(1); // 删除元素 deque.pollFirst(); deque.pollLast(); // 查看元素 deque.peekFirst(); deque.peekLast(); // 获取队列长度 deque.size() Deque的堆栈操作 Java堆栈的Stack已经过时，官方推荐使用Deque替代Stack使用
Deque的堆栈操作方法：
 push() : 等效于addFirst() pop() : 等效于removeFirst() peek() : 等效于peekFirst()  Priority queue PriorityQueue，即优先队列。优先级队列可以保证每次取出来的元素都是队列中的最小或最大的元素（Java优先级队列默认每次取出来的为最小元素）</description>
    </item>
    
  </channel>
</rss>
